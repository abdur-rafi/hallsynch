
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Student{
    studentId Int @id @default(autoincrement())
    student9DigitId String @db.Char(9) @unique 
    name String  // issue: first and last name?
    phone String
    email String
    residencyStatus ResidencyStatus
    password String

    departmentId Int 
    batchId Int
    levelTermId Int
    // residencyId Int

    department Department @relation(fields: [departmentId], references: [departmentId])
    batch Batch @relation(fields: [batchId], references: [batchId])
    levelTerm LevelTerm @relation(fields: [levelTermId], references: [levelTermId])
    residency Residency?

    // residency Residency @relation(fields: [residencyId], references: [residencyId])
    votes Vote[]
    preferences Preference[]
    optedOutOf MealPlan[]
    ratings Rating[]
    messManagerRoles MessManager[]
    messManagerApplications MessManagerApplication[]
    complaints Complaint[]
    applications SeatApplication[]
}

model Department{
    departmentId Int @id @default(autoincrement())
    name String
    shortName String
    deptCode String @db.Char(2)
    students Student[] 
}
model Batch{
    batchId Int @id @default(autoincrement())
    year String @db.Char(4)
    students Student[]
}
model LevelTerm{
    levelTermId Int @id @default(autoincrement())
    label String
    students Student[]
}
enum ResidencyStatus{
    ATTACHED
    RESIDENT
    TEMP_RESIDENT
}

model Residency{
    residencyId Int @id @default(autoincrement())
    from DateTime
    
    studentId Int @unique
    roomId Int

    room Room @relation(fields: [roomId], references: [roomId])
    student Student @relation(fields: [studentId], references: [studentId])
    
}

// Application


model SeatApplication{
    applicationId Int @default(autoincrement()) @id // issue: larger id?
    createdAt DateTime
    lastUpdate DateTime // issue: better name?
    status ApplicationStatus

    studentId Int
    student Student @relation(fields: [studentId], references: [studentId])

    newApplication NewApplication?
    tempApplication TempApplication?
    roomChangeApplication RoomChangeApplication?
    revisions Revision[]


}

model NewApplication{
    newApplicationId Int @id @default(autoincrement())

    applicationId Int @unique

    questionnaireId Int @unique
    application SeatApplication @relation(fields: [applicationId], references: [applicationId])
    questionnaire NewSeatQuestionnaire @relation(fields: [questionnaireId], references: [questionnaireId])


    attachedFiles AttachedFiles[]
}

model AttachedFiles{
    fileId Int @id @default(autoincrement())
    
    fileName String
    filePath String

    newApplicationId Int
    application NewApplication @relation(fields: [newApplicationId], references: [newApplicationId])

}


model TempApplication{
    from DateTime @db.Date
    days Int

    applicationId Int @unique // issue: larger id?
    questionnaireId Int
    prefRoomId Int

    applicaiton SeatApplication @relation(fields: [applicationId], references: [applicationId])
    questionnaire TempQuestionnaire @relation(fields: [questionnaireId], references: [questionnaireId])
    prefRoom Room @relation(fields: [prefRoomId], references: [roomId])

}

model TempQuestionnaire{
    questionnaireId Int @default(autoincrement()) @id
    tempApplications TempApplication[] 
}

model Revision{
    revisionId Int @id @default(autoincrement())
    reason String // issue: better name?
    createdAt DateTime

    applicationId Int

    application SeatApplication @relation(fields: [applicationId], references: [applicationId])

}

model Room{
    roomId Int @id @default(autoincrement())
    roomNo Int
    roomCapacity Int
    floorId Int
    

    floor Floor @relation(fields: [floorId], references: [floorId])
    tempApplications TempApplication[]
    roomChangeApplications RoomChangeApplication[]
    residencies Residency[]
    // issue : more fields?
}

model Floor{
    floorId Int @id @default(autoincrement())
    floorNo Int
    roomLabelLen Int
    rooms Room[]
}

model RoomChangeApplication{
    roomChangeApplicationId Int @id @default(autoincrement())
    reason String

    applicationId Int @unique // issue: larger id?
    toRoomId Int

    application SeatApplication @relation(fields: [applicationId], references: [applicationId])    
    toRoom Room @relation(fields: [toRoomId], references: [roomId])

    votes Vote[]
}

model NewSeatQuestionnaire{
    questionnaireId Int @default(autoincrement()) @id
    q1 Boolean 
    q2 Boolean
    newApplications NewApplication[] 
}

enum ApplicationStatus{
    PENDING
    ACCEPTED
    REJECTED
    REVISE
}

model Vote{
    voteId Int @id @default(autoincrement())
    reason String
    lastUpdated DateTime
    status VoteStatus

    roomChangeApplicationId Int
    studentId Int
    
    roomChangeApplication RoomChangeApplication @relation(fields: [roomChangeApplicationId], references: [roomChangeApplicationId])
    student Student @relation(fields: [studentId], references: [studentId])

    @@unique([roomChangeApplicationId, studentId])
}

enum VoteStatus{
    YES
    NO
    NOT_VOTED
}

model Item{
    itemId Int @id @default(autoincrement())
    name String
    type ItemType
    
    photoId Int?
    photo Photo? @relation(fields: [photoId], references: [photoId])

    meals Meal[]
    cupCounts CupCount[]
    preferences Preference[]
}
model Photo{
    photoId Int @id @default(autoincrement())
    filePath String
    item Item[]
}

enum ItemType{
    RICE
    VEG 
    NON_VEG
}

model Meal{
    mealId Int @id @default(autoincrement())
    createdAt DateTime
    items Item[] 

    mealPlans MealPlan[]
}

model MealPlan{
    mealPlanId Int @id @default(autoincrement())
    day DateTime
    mealTime MealTime

    mealId Int

    meal Meal @relation(fields: [mealId], references: [mealId])
    cupCount CupCount[]
    preferences Preference[]
    optedOut Student[]
}

enum MealTime{
    LUNCH
    DINNER
}

// model MealTime{
//     mealTimeId Int @id @default(autoincrement())
//     time String
//     mealPlans MealPlan[]
// }

model CupCount{
    cupcount Int
    
    mealPlanId Int
    itemId Int

    @@id([mealPlanId, itemId])

    mealPlan MealPlan @relation(fields: [mealPlanId], references: [mealPlanId])
    item Item @relation(fields: [itemId], references: [itemId])
}

model Preference{
    order Int
    
    mealPlanId Int
    itemId Int
    studentId Int

    mealPlan MealPlan @relation(fields: [mealPlanId], references: [mealPlanId])
    item Item @relation(fields: [itemId], references: [itemId])
    student Student @relation(fields: [studentId], references: [studentId])

    @@id([mealPlanId, itemId, studentId])
}

model Feedback{
    feedbackId Int @id @default(autoincrement())
    week DateTime // issue : different data type?

    ratings Rating[]
}

model Rating{
    rating Float
    type RatingType

    feedbackId Int
    studentId Int
    
    feedback Feedback @relation(fields: [feedbackId], references: [feedbackId])
    student Student @relation(fields: [studentId], references: [studentId])

    @@id([feedbackId, studentId, type])
}

enum RatingType{
    QUALITY
    QUANTITY
    MANAGEMENT
}

model MessManager{
    messManagerId Int @id @default(autoincrement())
    from DateTime
    to DateTime
    assingedAt DateTime

    studentId Int
    student Student @relation(fields: [studentId], references: [studentId])
}

model MessManagerApplication{
    applicationId Int @id @default(autoincrement())
    preferredTimeRange DateTime // issue : from to?
    appliedAt DateTime

    studentId Int
    student Student @relation(fields: [studentId], references: [studentId])
}

model Complaint{
    complainId Int @id @default(autoincrement())
    // issue : longer id?
    title String
    details String
    createdAt DateTime
    type ComplaintType

    studentId Int
    student Student @relation(fields: [studentId], references: [studentId])
}

enum ComplaintType{
    RESOURCE
    STUDENT
    STUFF
}