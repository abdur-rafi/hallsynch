generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  studentId       Int             @id @default(autoincrement())
  student9DigitId String          @unique @db.Char(9)
  name            String // issue: first and last name?
  phone           String
  email           String
  residencyStatus ResidencyStatus
  password        String

  departmentId Int
  batchId      Int
  levelTermId  Int
  // residencyId Int

  department Department @relation(fields: [departmentId], references: [departmentId])
  batch      Batch      @relation(fields: [batchId], references: [batchId])
  levelTerm  LevelTerm  @relation(fields: [levelTermId], references: [levelTermId])
  residency  Residency?

  // residency Residency @relation(fields: [residencyId], references: [residencyId])
  votes                Vote[]
  complaints           Complaint[]
  applications         SeatApplication[]
  tempResidency        TempResidency?
  tempResidencyHistory TempResidencyHistory[]
  UploadedFile         UploadedFile[]
  notifications        Notification[]
}

model Department {
  departmentId Int       @id @default(autoincrement())
  name         String
  shortName    String
  deptCode     String    @db.Char(2)
  students     Student[]
}

model Batch {
  batchId  Int       @id @default(autoincrement())
  year     String    @db.Char(4)
  students Student[]
}

model LevelTerm {
  levelTermId Int       @id @default(autoincrement())
  label       String
  students    Student[]
}

enum ResidencyStatus {
  ATTACHED
  RESIDENT
  TEMP_RESIDENT
}

model Residency {
  residencyId Int      @id @default(autoincrement())
  from        DateTime

  studentId Int @unique

  seatId Int @unique

  seat                   Seat                     @relation(fields: [seatId], references: [seatId])
  student                Student                  @relation(fields: [studentId], references: [studentId])
  Participation          Participation[]
  Preference             Preference[]
  OptedOut               OptedOut[]
  Rating                 Rating[]
  FeedBackGiven          FeedBackGiven[]
  MessManager            MessManager[]
  MessManagerApplication MessManagerApplication[]
}

model TempResidency {
  tempResidencyId Int      @id @default(autoincrement())
  from            DateTime
  days            Int

  studentId Int @unique

  seatId Int @unique

  seat    Seat    @relation(fields: [seatId], references: [seatId])
  student Student @relation(fields: [studentId], references: [studentId])
}

model TempResidencyHistory {
  //   tempResidencyId Int      @id @default(autoincrement())
  tempResidencyHistoryId Int      @id @default(autoincrement())
  from                   DateTime
  to                     DateTime

  studentId Int

  seatId Int

  seat    Seat    @relation(fields: [seatId], references: [seatId])
  student Student @relation(fields: [studentId], references: [studentId])
}

// Application

model SeatApplication {
  applicationId Int               @id @default(autoincrement()) // issue: larger id?
  createdAt     DateTime          @default(now())
  lastUpdate    DateTime          @default(now()) // issue: better name? 
  status        ApplicationStatus

  studentId Int
  student   Student @relation(fields: [studentId], references: [studentId])

  newApplication        NewApplication?
  tempApplication       TempApplication?
  seatChangeApplication SeatChangeApplication?
  revisions             Revision[]
  approveHisotry        ApplicationApproveHistory?

  rejectionHistory RejectionHistory?
  attachedFiles    AttachedFiles[]
  notifications    Notification[]
}

model NewApplication {
  newApplicationId Int @id @default(autoincrement())

  applicationId Int @unique

  questionnaireId Int                  @unique
  application     SeatApplication      @relation(fields: [applicationId], references: [applicationId])
  questionnaire   NewSeatQuestionnaire @relation(fields: [questionnaireId], references: [questionnaireId])
}

model AttachedFiles {
  uploadedFileId Int
  applicationId  Int

  uploadedFile UploadedFile    @relation(fields: [uploadedFileId], references: [uploadedFileId])
  application  SeatApplication @relation(fields: [applicationId], references: [applicationId])

  @@unique([uploadedFileId, applicationId])
}

model UploadedFile {
  uploadedFileId Int @id @default(autoincrement())

  fileName String
  filePath String

  studentId Int
  student   Student @relation(fields: [studentId], references: [studentId])

  AttachedFiles AttachedFiles[]
  Photo         Photo[]
}

model TempApplication {
  from DateTime @db.Date
  days Int

  applicationId   Int @unique // issue: larger id?
  questionnaireId Int
  prefSeatId      Int

  applicaiton   SeatApplication   @relation(fields: [applicationId], references: [applicationId])
  questionnaire TempQuestionnaire @relation(fields: [questionnaireId], references: [questionnaireId])
  prefSeat      Seat              @relation(fields: [prefSeatId], references: [seatId])
  Room          Room?             @relation(fields: [roomRoomId], references: [roomId])
  roomRoomId    Int?
}

model TempQuestionnaire {
  questionnaireId  Int               @id @default(autoincrement())
  tempApplications TempApplication[]
}

model Revision {
  revisionId Int      @id @default(autoincrement())
  reason     String // issue: better name?
  createdAt  DateTime @default(now())

  applicationId Int

  application SeatApplication @relation(fields: [applicationId], references: [applicationId])
}

model ApplicationApproveHistory {
  applicationId Int @unique
  seatId        Int
  authorityId   Int

  application SeatApplication @relation(fields: [applicationId], references: [applicationId])
  seat        Seat            @relation(fields: [seatId], references: [seatId])
  authority   Authority       @relation(fields: [authorityId], references: [authorityId])

  time DateTime @default(now())
}

model Seat {
  seatId    Int    @id @default(autoincrement())
  seatLabel String @db.Char(1)
  roomId    Int

  room                  Room                        @relation(fields: [roomId], references: [roomId])
  residency             Residency?
  applicationsApproved  ApplicationApproveHistory[]
  tempResidency         TempResidency?
  tempResidencyHistory  TempResidencyHistory[]
  TempApplication       TempApplication[]
  SeatChangeApplication SeatChangeApplication[]
}

model Room {
  roomId  Int @id @default(autoincrement())
  roomNo  Int
  floorId Int

  floor                  Floor                   @relation(fields: [floorId], references: [floorId])
  tempApplications       TempApplication[]
  seatChangeApplications SeatChangeApplication[]
  seats                  Seat[]

  // issue : more fields?
  @@unique([floorId, roomNo])
}

model Floor {
  floorId      Int    @id @default(autoincrement())
  floorNo      Int    @unique
  roomLabelLen Int
  rooms        Room[]
}

model SeatChangeApplication {
  seatChangeApplicationId Int    @id @default(autoincrement())
  reason                  String

  applicationId Int @unique // issue: larger id?
  toSeatId      Int

  application SeatApplication @relation(fields: [applicationId], references: [applicationId])
  toSeat      Seat            @relation(fields: [toSeatId], references: [seatId])

  votes      Vote[]
  Room       Room?  @relation(fields: [roomRoomId], references: [roomId])
  roomRoomId Int?
}

model NewSeatQuestionnaire {
  questionnaireId Int              @id @default(autoincrement())
  q1              Boolean
  q2              Boolean
  newApplications NewApplication[]
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
  REVISE
}

model Vote {
  voteId      Int        @id @default(autoincrement())
  reason      String
  lastUpdated DateTime
  status      VoteStatus

  seatChangeApplicationId Int
  studentId               Int

  seatChangeApplication SeatChangeApplication @relation(fields: [seatChangeApplicationId], references: [seatChangeApplicationId])
  student               Student               @relation(fields: [studentId], references: [studentId])
  notification          Notification?

  @@unique([seatChangeApplicationId, studentId])
}

enum VoteStatus {
  YES
  NO
  NOT_VOTED
}

model Authority {
  authorityId Int           @id @default(autoincrement())
  name        String
  email       String        @unique
  phone       String?
  role        AuthorityRole
  password    String

  applicationsHistory        ApplicationApproveHistory[]
  RejectionHistory           RejectionHistory[]
  announcements              Announcement[]
  MessManagerApplicationCall MessManagerApplicationCall[]
}

enum AuthorityRole {
  PROVOST
  ASSISTANT_PROVOST
  DINING_STUFF
}

model RejectionHistory {
  applicationId Int @unique
  authorityId   Int

  application SeatApplication @relation(fields: [applicationId], references: [applicationId])
  authority   Authority       @relation(fields: [authorityId], references: [authorityId])

  time DateTime @default(now())
}

model Notification {
  notificationId Int    @id @default(autoincrement())
  text           String
  applicationId  Int?
  voteId         Int?   @unique
  studentId      Int

  time DateTime @default(now())
  seen Boolean  @default(false)

  application SeatApplication? @relation(fields: [applicationId], references: [applicationId])
  vote        Vote?            @relation(fields: [voteId], references: [voteId])
  student     Student          @relation(fields: [studentId], references: [studentId])
}

model Item {
  itemId Int      @id @default(autoincrement())
  name   String
  type   ItemType

  photoId Int?
  photo   Photo? @relation(fields: [photoId], references: [photoId])

  meals       Meal[]
  cupCounts   CupCount[]
  preferences Preference[]
}

model Photo {
  photoId        Int @id @default(autoincrement())
  uploadedFileId Int

  file UploadedFile @relation(fields: [uploadedFileId], references: [uploadedFileId])
  item Item[]
}

enum ItemType {
  RICE
  VEG
  NON_VEG
}

model Meal {
  mealId    Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  items     Item[]

  mealPlans MealPlan[]
}

model MealPlan {
  mealPlanId Int      @id @default(autoincrement())
  day        DateTime
  mealTime   MealTime

  mealId        Int
  messManagerId Int

  meal          Meal            @relation(fields: [mealId], references: [mealId])
  cupCount      CupCount[]
  preferences   Preference[]
  Participation Participation[]
  OptedOut      OptedOut[]
  messManager   MessManager     @relation(fields: [messManagerId], references: [messManagerId])
  startFeedBack Feedback?       @relation("StartMeal")
  endFeedBack   Feedback?       @relation("EndMeal")
}

enum MealTime {
  LUNCH
  DINNER
}

// model MealTime{
//     mealTimeId Int @id @default(autoincrement())
//     time String
//     mealPlans MealPlan[]
// }

model CupCount {
  cupcount Int

  mealPlanId Int
  itemId     Int

  mealPlan MealPlan @relation(fields: [mealPlanId], references: [mealPlanId])
  item     Item     @relation(fields: [itemId], references: [itemId])

  @@id([mealPlanId, itemId])
}

model Participation {
  mealPlanId  Int
  residencyId Int

  mealPlan  MealPlan  @relation(fields: [mealPlanId], references: [mealPlanId])
  residency Residency @relation(fields: [residencyId], references: [residencyId])

  time DateTime @default(now())

  @@unique([mealPlanId, residencyId])
}

model Preference {
  order Int

  mealPlanId  Int
  itemId      Int
  residencyId Int

  mealPlan  MealPlan  @relation(fields: [mealPlanId], references: [mealPlanId])
  item      Item      @relation(fields: [itemId], references: [itemId])
  residency Residency @relation(fields: [residencyId], references: [residencyId])

  @@id([mealPlanId, itemId, residencyId])
}

model OptedOut {
  residencyId Int
  mealPlanId  Int
  time        DateTime @default(now())

  residency Residency @relation(fields: [residencyId], references: [residencyId])
  mealPlan  MealPlan  @relation(fields: [mealPlanId], references: [mealPlanId])

  @@unique([mealPlanId, residencyId])
}

model Announcement {
  announcementId Int      @id @default(autoincrement())
  title          String
  details        String
  createdAt      DateTime @default(now())
  authorityId    Int?
  messManagerId  Int?

  authority   Authority?   @relation(fields: [authorityId], references: [authorityId])
  messManager MessManager? @relation(fields: [messManagerId], references: [messManagerId])
}

model Feedback {
  feedbackId    Int      @id @default(autoincrement())
  startDate     DateTime // issue : different data type?
  messManagerId Int

  startMealPlanId Int @unique
  endMealPlanId   Int @unique

  ratings       Rating[]
  messManager   MessManager     @relation(fields: [messManagerId], references: [messManagerId])
  startMealPlan MealPlan        @relation(name: "StartMeal", fields: [startMealPlanId], references: [mealPlanId])
  endMealPlan   MealPlan        @relation(name: "EndMeal", fields: [endMealPlanId], references: [mealPlanId])
  FeedBackGiven FeedBackGiven[]
}

model FeedBackGiven {
  feedBackId  Int
  residencyId Int

  feedBack  Feedback  @relation(fields: [feedBackId], references: [feedbackId])
  residency Residency @relation(fields: [residencyId], references: [residencyId])

  comment String?

  @@id([residencyId, feedBackId])
}

model Rating {
  rating Float
  type   RatingType

  feedbackId  Int
  residencyId Int
  feedback    Feedback  @relation(fields: [feedbackId], references: [feedbackId])
  residency   Residency @relation(fields: [residencyId], references: [residencyId])

  givenAt DateTime @default(now())

  @@id([feedbackId, residencyId, type])
}

enum RatingType {
  QUALITY
  QUANTITY
  MANAGEMENT
}

model MessManagerApplicationCall {
  callId Int @id @default(autoincrement())

  from DateTime

  to DateTime

  createdAt DateTime @default(now())

  createdById Int

  createdBy Authority @relation(fields: [createdById], references: [authorityId])
}

model MessManager {
  messManagerId Int      @id @default(autoincrement())
  from          DateTime
  to            DateTime
  assingedAt    DateTime @default(now())

  residencyId Int
  residency   Residency @relation(fields: [residencyId], references: [residencyId])

  announcements Announcement[]
  MealPlan      MealPlan[]
  Feedback      Feedback[]
}

model MessManagerApplication {
  applicationId Int               @id @default(autoincrement())
  preferredFrom DateTime          @db.Date
  preferredTo   DateTime          @db.Date
  appliedAt     DateTime          @default(now())
  status        ApplicationStatus @default(PENDING)

  residencyId Int

  residency Residency @relation(fields: [residencyId], references: [residencyId])
}

model Complaint {
  complainId Int           @id @default(autoincrement())
  // issue : longer id?
  title      String
  details    String
  createdAt  DateTime      @default(now())
  type       ComplaintType

  studentId Int
  student   Student @relation(fields: [studentId], references: [studentId])
}

enum ComplaintType {
  RESOURCE
  STUDENT
  STUFF
}
