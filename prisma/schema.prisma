
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Student{
    studentId Int @id @default(autoincrement())
    student9DigitId String @db.Char(9) @unique 
    name String  // issue: first and last name?
    phone String
    email String
    departmentId Int 
    batchId Int
    levelTermId Int
    residencyId Int
    department Department @relation(fields: [departmentId], references: [departmentId])
    batch Batch @relation(fields: [batchId], references: [batchId])
    levelTerm LevelTerm @relation(fields: [levelTermId], references: [levelTermId])
    residency Residency @relation(fields: [residencyId], references: [residencyId])
    newApplications NewApplication[]
    tempApplications TempApplication[]
    roomChangeApplications RoomChangeApplication[]
    votes Vote[]
    preferences Preference[]
    optedOutOf MealPlan[]
    ratings Rating[]
}

model Department{
    departmentId Int @id @default(autoincrement())
    name String
    students Student[] 
}
model Batch{
    batchId Int @id @default(autoincrement())
    year String @db.Char(4)
    students Student[]
}
model LevelTerm{
    levelTermId Int @id @default(autoincrement())
    label String
    students Student[]
}
model Residency{
    residencyId Int @id @default(autoincrement())
    label String
    students Student[]
}

// Application


model NewApplication{
    applicationId Int @default(autoincrement()) @id // issue: larger id?
    createdAt DateTime
    lastUpdate DateTime // issue: better name?


    questionnaireId Int
    studentId Int
    statusId Int 

    questionnaire NewSeatQuestionnaire @relation(fields: [questionnaireId], references: [questionnaireId])
    student Student @relation(fields: [studentId], references: [studentId])
    status ApplicationStatus @relation(fields: [statusId], references: [statusId]) 

    attachedFiles AttachedFiles[]
    revisions Revision[]
}

model AttachedFiles{
    fileId Int @id @default(autoincrement())
    
    fileName String
    filePath String

    applicationId Int
    application NewApplication @relation(fields: [applicationId], references: [applicationId])

}


model TempApplication{
    applicationId Int @default(autoincrement()) @id // issue: larger id?
    createdAt DateTime
    lastUpdate DateTime // issue: better name?
    fromTime DateTime
    days Int


    questionnaireId Int
    studentId Int
    statusId Int 
    prefRoomId Int

    questionnaire TempQuestionnaire @relation(fields: [questionnaireId], references: [questionnaireId])
    student Student @relation(fields: [studentId], references: [studentId])
    status ApplicationStatus @relation(fields: [statusId], references: [statusId])
    prefRoom Room @relation(fields: [prefRoomId], references: [roomId])

}

model TempQuestionnaire{
    questionnaireId Int @default(autoincrement()) @id
    tempApplications TempApplication[] 
}

model Revision{
    revisionId Int @id @default(autoincrement())
    reason String // issue: better name?
    createdAt DateTime

    applicationId Int

    application NewApplication @relation(fields: [applicationId], references: [applicationId])

}

model Room{
    roomId Int @id @default(autoincrement())
    roomNo String
    tempApplications TempApplication[]
    roomChangeApplications RoomChangeApplication[]
    // issue : more fields?
}

model RoomChangeApplication{
    applicationId Int @default(autoincrement()) @id // issue: larger id?
    createdAt DateTime
    lastUpdate DateTime // issue: better name?
    reason String

    studentId Int
    statusId Int 
    toRoomId Int
    
    student Student @relation(fields: [studentId], references: [studentId])
    status ApplicationStatus @relation(fields: [statusId], references: [statusId])
    toRoom Room @relation(fields: [toRoomId], references: [roomId])

    votes Vote[]
}

model NewSeatQuestionnaire{
    questionnaireId Int @default(autoincrement()) @id
    newApplications NewApplication[] 
}

model ApplicationStatus{
    statusId Int @id @default(autoincrement())
    label String
    newApplications NewApplication[]
    tempApplications TempApplication[]
    roomChangeApplications RoomChangeApplication[]
}

model Vote{
    voteId Int @id @default(autoincrement())
    reason String
    lastUpdated DateTime


    applicationId Int
    studentId Int
    statusId Int
    
    application RoomChangeApplication @relation(fields: [applicationId], references: [applicationId])
    student Student @relation(fields: [studentId], references: [studentId])
    status VoteStatus @relation(fields: [statusId], references: [voteStatusId])

    @@unique([applicationId, studentId])
}

model VoteStatus{
    voteStatusId Int @id @default(autoincrement())
    label String
    votes Vote[]
}

model Item{
    itemId Int @id @default(autoincrement())
    name String
    
    photoId Int?
    itemTypeId Int

    photo Photo? @relation(fields: [photoId], references: [photoId])
    type ItemType @relation(fields: [itemTypeId], references: [itemTypeId])

    meals Meal[]
    cupCounts CupCount[]
    preferences Preference[]
}
model Photo{
    photoId Int @id @default(autoincrement())
    filePath String
    item Item[]
}
model ItemType{
    itemTypeId Int @id @default(autoincrement())
    item Item[]
}

model Meal{
    mealId Int @id @default(autoincrement())
    createdAt DateTime
    items Item[] 

    mealPlans MealPlan[]
}

model MealPlan{
    mealPlanId Int @id @default(autoincrement())
    day DateTime

    mealId Int
    mealTimeId Int

    meal Meal @relation(fields: [mealId], references: [mealId])
    mealTime MealTime @relation(fields: [mealTimeId], references: [mealTimeId])
    cupCount CupCount[]
    preferences Preference[]
    optedOut Student[]
}

model MealTime{
    mealTimeId Int @id @default(autoincrement())
    time String

    mealPlans MealPlan[]

}

model CupCount{
    cupcount Int
    
    mealPlanId Int
    itemId Int

    @@id([mealPlanId, itemId])

    mealPlan MealPlan @relation(fields: [mealPlanId], references: [mealPlanId])
    item Item @relation(fields: [itemId], references: [itemId])
}

model Preference{
    order Int
    
    mealPlanId Int
    itemId Int
    studentId Int

    mealPlan MealPlan @relation(fields: [mealPlanId], references: [mealPlanId])
    item Item @relation(fields: [itemId], references: [itemId])
    student Student @relation(fields: [studentId], references: [studentId])

    @@id([mealPlanId, itemId, studentId])
}

model Feedback{
    feedbackId Int @id @default(autoincrement())
    week DateTime // issue : different data type?

    ratings Rating[]
}

model Rating{
    rating Float

    feedbackId Int
    typeId Int
    studentId Int

    feedback Feedback @relation(fields: [feedbackId], references: [feedbackId])
    type RatingType @relation(fields: [typeId], references: [ratingTypeId])
    student Student @relation(fields: [studentId], references: [studentId])

    @@id([feedbackId, studentId, typeId])
}

model RatingType{
    ratingTypeId Int @id @default(autoincrement())
    label String
    ratings Rating[]
}

// model OptOut{
//     studentId Int
//     mealPlanId Int

//     student Student @relation(fields: [studentId], references: [studentId])
//     mealPlan MealPlan @relation(fields: [mealPlanId], references: [mealPlanId])

//     @@id([mealPlanId, studentId])
// }